'''
Problem 45:

Triangle, pentagonal, and hexagonal numbers are generated by the following
formulae:

Triangle   | Tn=n(n+1)/2  | 1, 3, 6, 10, 15, ...
Pentagonal | Pn=n(3n-1)/2 | 1, 5, 12, 22, 35, ...
Hexagonal  | Hn=n(2n-1)   | 1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
'''
from p042 import is_square
from p044 import pentagonal
from math import sqrt

def is_triangular(tn):
    '''Leverages:
    The inverse of triangular: n = -1/2 + 1/2 * sqrt(1 + 8 * tn)
    Therefore, 1 + 8 * pn must be square for tn to be triangular.
    Also, since n must be an integer, the evaluated sqrt must be odd
    '''
    special_factor = 1 + 8 * tn
    if is_square(special_factor):
        given_root = int(sqrt(special_factor))
        if given_root % 2 == 1:
            return True
    return False

def is_hexagonal(hn):
    '''Leverages:
    The inverse of hexagonal: n = -1/4 + 1/4 * sqrt(1 + 8 * hn)
    Therefore, 1 + 8 * hn must be square for hn to be hexagonal.
    Also, since n must be an integer, the evaluated sqrt must:
        Have a modulus of 3 with 4
    '''
    special_factor = 1 + 8 * hn
    if is_square(special_factor):
        given_root = int(sqrt(special_factor))
        if given_root % 4 == 3:
            return True
    return False

def is_joint_number(num):
    return is_triangular(num) and is_hexagonal(num)


def find_next_joint_number(nth_pentagonal=1):
    while not is_joint_number(pentagonal(nth_pentagonal)):
        nth_pentagonal += 1
    return pentagonal(nth_pentagonal)

def main():
    print find_next_joint_number(nth_pentagonal=166)

if __name__ == "__main__":
    main()
